# run_bot.py (–î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ê –í–ï–†–°–Ü–Ø –ó –§–ï–ô–ö–û–í–ò–ú–ò –î–ê–ù–ò–ú–ò)

import os
import logging
import multiprocessing as mp
import time
import uuid
import asyncio
from queue import Empty
import pandas as pd # –î–æ–¥–∞–ª–∏ pandas —Å—é–¥–∏

from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.constants import ParseMode

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –Ω–∞—à–æ–≥–æ –ø–∞–∫–µ—Ç—É src
# from src.services.funding_service import get_all_funding_data_sequential # –¶–ï –ù–ê–ú –ë–Ü–õ–¨–®–ï –ù–ï –ü–û–¢–†–Ü–ë–ù–û
from src.services.formatters import format_funding_update
from src.keyboards import get_main_menu_keyboard
from src.user_manager import get_user_settings, _save_settings, _load_settings

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)

def worker_process(task_queue: mp.Queue, result_queue: mp.Queue):
    worker_logger = logging.getLogger("Worker")
    worker_logger.info("–í–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π.")
    while True:
        try:
            task = task_queue.get()
            if task is None: break

            job_id, exchanges_list = task
            worker_logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è #{job_id} –¥–ª—è –±—ñ—Ä–∂: {exchanges_list}")
            
            # --- !!! –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê !!! ---
            # –ú–∏ –ù–ï –≤–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ ccxt.
            # –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ –º–∏ —ñ–º—ñ—Ç—É—î–º–æ, —â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ —è–∫—ñ—Å—å –¥–∞–Ω—ñ.
            worker_logger.info("!!! –Ü–ú–Ü–¢–ê–¶–Ü–Ø –†–û–ë–û–¢–ò: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–µ–π–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")
            time.sleep(3) # –Ü–º—ñ—Ç—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É
            
            fake_data = [
                {'symbol': 'BTC', 'rate': 0.01, 'exchange': 'Binance', 'next_funding_time': pd.Timestamp.now(tz='UTC')},
                {'symbol': 'ETH', 'rate': -0.05, 'exchange': 'ByBit', 'next_funding_time': pd.Timestamp.now(tz='UTC')},
                {'symbol': 'SOL', 'rate': 0.12, 'exchange': 'OKX', 'next_funding_time': pd.Timestamp.now(tz='UTC')},
            ]
            result_df = pd.DataFrame(fake_data)
            worker_logger.info("!!! –Ü–ú–Ü–¢–ê–¶–Ü–Ø –†–û–ë–û–¢–ò: –§–µ–π–∫–æ–≤—ñ –¥–∞–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
            # ---------------------------
            
            result_queue.put((job_id, result_df))
            worker_logger.info(f"–ó–∞–≤–¥–∞–Ω–Ω—è #{job_id} –≤–∏–∫–æ–Ω–∞–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        except Exception as e:
            worker_logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —É –≤–æ—Ä–∫–µ—Ä—ñ: {e}", exc_info=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (—Ä–µ—à—Ç–∞ –∫–æ–¥—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω, —è–∫ —É –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó)
    chat_id = update.effective_chat.id
    bot_logger = logging.getLogger("Bot")
    bot_logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} –∑–∞–ø—É—Å—Ç–∏–≤ /start.")

    _load_settings()
    settings = get_user_settings(chat_id)
    _save_settings()

    task_queue = context.bot_data['task_queue']
    result_queue = context.bot_data['result_queue']
    
    job_id = str(uuid.uuid4())
    
    await update.message.reply_text("–í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —á–µ—Ä–≥—É (–†–ï–ñ–ò–ú –Ü–ú–Ü–¢–ê–¶–Ü–á)...")
    
    exchanges_to_scan = list(settings['exchanges'])
    task_queue.put((job_id, exchanges_to_scan))
    
    processing_message = await update.message.reply_text(f"–ó–∞–≤–¥–∞–Ω–Ω—è #{job_id[:6]} –≤ —á–µ—Ä–∑—ñ. –û—á—ñ–∫—É—é –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
    
    result_df = None
    start_time = time.time()
    while time.time() - start_time < 120:
        try:
            if not result_queue.empty():
                job_result_id, df = result_queue.get_nowait()
                if job_result_id == job_id:
                    result_df = df
                    bot_logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è #{job_id[:6]}")
                    break
                else:
                    result_queue.put((job_result_id, df))
        except Empty:
            pass
        
        await asyncio.sleep(1)
            
    if result_df is not None:
        message_text = format_funding_update(result_df, settings['threshold'])
        await processing_message.edit_text(
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu_keyboard(),
            disable_web_page_preview=True
        )
    else:
        bot_logger.error(f"–¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è #{job_id[:6]}")
        await processing_message.edit_text("üòî –í–æ—Ä–∫–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤ –≤—á–∞—Å–Ω–æ.")


def main() -> None:
    # ... (–∫–æ–¥ main –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
    main_logger = logging.getLogger("Main")
    load_dotenv()
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TELEGRAM_BOT_TOKEN")

    task_queue = mp.Queue()
    result_queue = mp.Queue()

    worker = mp.Process(target=worker_process, args=(task_queue, result_queue), daemon=True)
    worker.start()
    main_logger.info("–ü—Ä–æ—Ü–µ—Å-–≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π.")

    application = Application.builder().token(TOKEN).build()
    application.bot_data["task_queue"] = task_queue
    application.bot_data["result_queue"] = result_queue

    application.add_handler(CommandHandler("start", start))
    
    main_logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    
    try:
        application.run_polling(drop_pending_updates=True)
    finally:
        main_logger.info("–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
        task_queue.put(None)
        worker.join(timeout=5)
        if worker.is_alive():
            worker.terminate()
        main_logger.info("–ë–æ—Ç —Ç–∞ –≤–æ—Ä–∫–µ—Ä –∑—É–ø–∏–Ω–µ–Ω—ñ.")

if __name__ == "__main__":
    if os.name == 'nt':
        mp.set_start_method('spawn', force=True)
    main()