# run_bot.py (–°–£–ü–ï–†-–°–ü–†–û–©–ï–ù–ê –í–ï–†–°–Ü–Ø)

import os
import logging
import time

from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.constants import ParseMode

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ —Ä–æ–±–æ—á—ñ –º–æ–¥—É–ª—ñ
# –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Ü–µ–π —Ñ–∞–π–ª –≤ –∫–æ—Ä–µ–Ω—ñ, –∞ –ø–æ—Ä—É—á —î –ø–∞–ø–∫–∞ src
from src.services.funding_service import get_all_funding_data_sequential
from src.services.formatters import format_funding_update
from src.keyboards import get_main_menu_keyboard

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
# –û—Å–∫—ñ–ª—å–∫–∏ –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, –≤–æ–Ω–∏ –±—É–¥—É—Ç—å –æ–¥–Ω–∞–∫–æ–≤—ñ –¥–ª—è –≤—Å—ñ—Ö
DEFAULT_EXCHANGES = ['Binance', 'ByBit', 'OKX', 'MEXC', 'Bitget', 'KuCoin']
DEFAULT_THRESHOLD = 0.3


# --- –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.effective_chat or not update.message:
        return
        
    chat_id = update.effective_chat.id
    logger.info(f"!!! –û–¢–†–ò–ú–ê–ù–û /start –í–Ü–î {chat_id} !!!")
    
    await update.message.reply_text("–ü–æ—á–∏–Ω–∞—é –ø–æ—à—É–∫... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ —Ö–≤–∏–ª–∏–Ω–∏, –±–æ—Ç –Ω–µ –±—É–¥–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –≤ —Ü–µ–π —á–∞—Å.")
    logger.info("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    try:
        # --- –ù–ê–ô–ü–†–û–°–¢–Ü–®–ò–ô –í–ò–ö–õ–ò–ö ---
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –Ω–∞–ø—Ä—è–º—É. –¶–µ –∑–∞–±–ª–æ–∫—É—î –±–æ—Ç–∞, –∞–ª–µ –º–∏ –ø–æ–≤–∏–Ω–Ω—ñ –ø–æ–±–∞—á–∏—Ç–∏ –ª–æ–≥–∏.
        logger.info(">>> –ü–æ—á–∏–Ω–∞—é –ü–†–Ø–ú–ò–ô –≤–∏–∫–ª–∏–∫ get_all_funding_data_sequential...")
        
        start_time = time.time()
        df = get_all_funding_data_sequential(DEFAULT_EXCHANGES)
        end_time = time.time()
        
        logger.info(f"<<< –í–∏–∫–ª–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥.")
        
        if df.empty:
            logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ –ø—É—Å—Ç–∏–π DataFrame, –Ω–∞–¥—Å–∏–ª–∞—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ü–µ.")
            await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –±—ñ—Ä–∂.")
            return

        message_text = format_funding_update(df, DEFAULT_THRESHOLD)
        logger.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ, –Ω–∞–¥—Å–∏–ª–∞—é...")
        
        await update.message.reply_text(
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu_keyboard(),
            disable_web_page_preview=True
        )
        logger.info("–§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ /start –¥–ª—è {chat_id}: {e}", exc_info=True)
        await update.message.reply_text("üòî –í–∏–Ω–∏–∫–ª–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏.")


# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É ---
def main() -> None:
    load_dotenv()
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        logger.critical("!!! –ù–ï –ó–ù–ê–ô–î–ï–ù–û TELEGRAM_BOT_TOKEN !!!")
        return

    application = Application.builder().token(TOKEN).build()
    
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ /start
    application.add_handler(CommandHandler("start", start))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –≤ –ù–ê–ô–ü–†–û–°–¢–Ü–®–û–ú–£ —Ä–µ–∂–∏–º—ñ...")
    application.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()