# run_bot.py (–ü–û–í–ù–ê –§–£–ù–ö–¶–Ü–û–ù–ê–õ–¨–ù–ê –í–ï–†–°–Ü–Ø)

import os
import logging
import time
import html
import pandas as pd
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters, ConversationHandler
from telegram.constants import ParseMode

# --- –Ü–º–ø–æ—Ä—Ç–∏ –∑ –Ω–∞—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É ---
from src.services.funding_service import get_all_funding_data_sequential, get_funding_for_ticker_sequential
from src.config import AVAILABLE_EXCHANGES, DEFAULT_SETTINGS, EXCHANGE_URL_TEMPLATES
from src.constants import SET_THRESHOLD_STATE
# –ü—Ä–∏–º—ñ—Ç–∫–∞: –ú–∏ –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ–∞–π–ª–∏ formatters, keyboards, user_manager, –±–æ –≤—Å—è –ª–æ–≥—ñ–∫–∞ —Ç–µ–ø–µ—Ä —Ç—É—Ç.

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# --- –†–æ–±–æ—Ç–∞ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤ –ø–∞–º'—è—Ç—ñ) ---
_user_settings_cache = {}
def get_user_settings(chat_id: int) -> dict:
    chat_id_str = str(chat_id)
    if chat_id_str not in _user_settings_cache:
        _user_settings_cache[chat_id_str] = DEFAULT_SETTINGS.copy()
    return _user_settings_cache[chat_id_str]

def update_user_setting(chat_id: int, key: str, value):
    chat_id_str = str(chat_id)
    settings = get_user_settings(chat_id)
    settings[key] = value

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---
def get_main_menu_keyboard():
    keyboard = [[InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh"), InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings_menu")]]
    return InlineKeyboardMarkup(keyboard)

def get_settings_menu_keyboard(settings: dict):
    bot_status_text = "üü¢ –ë–æ—Ç ON" if settings.get('enabled', True) else "üî¥ –ë–æ—Ç OFF"
    keyboard = [
        [InlineKeyboardButton("üåê –ë—ñ—Ä–∂—ñ", callback_data="settings_exchanges")],
        [InlineKeyboardButton(f"üìä –§–∞–Ω–¥—ñ–Ω–≥: > {settings['threshold']}%", callback_data="settings_threshold")],
        [InlineKeyboardButton(bot_status_text, callback_data="toggle_bot_status")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_settings")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_exchange_selection_keyboard(selected_exchanges: list):
    buttons = []
    row = []
    for name in AVAILABLE_EXCHANGES.keys():
        text = f"‚úÖ {name}" if name in selected_exchanges else f"‚òëÔ∏è {name}"
        row.append(InlineKeyboardButton(text, callback_data=f"toggle_exchange_{name}"))
        if len(row) == 2: buttons.append(row); row = []
    if row: buttons.append(row)
    buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="settings_menu")])
    return InlineKeyboardMarkup(buttons)

def get_back_to_settings_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="settings_menu")]])

# --- –§–æ—Ä–º–∞—Ç—É–≤–∞–ª—å–Ω–∏–∫–∏ ---
def format_funding_update(df: pd.DataFrame, threshold: float) -> str:
    if df.empty: return "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–∏—Ö –ø–æ —Ñ–∞–Ω–¥—ñ–Ω–≥—É –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö –±—ñ—Ä–∂."
    filtered_df = df[abs(df['rate']) >= threshold].sort_values(by='rate', ascending=False)
    if filtered_df.empty: return f"üü¢ –ù–µ–º–∞—î –º–æ–Ω–µ—Ç –∑ —Ñ–∞–Ω–¥—ñ–Ω–≥–æ–º –≤–∏—â–µ <b>{threshold}%</b> –∞–±–æ –Ω–∏–∂—á–µ <b>-{threshold}%</b>."
    header = f"<b>üíé –§–∞–Ω–¥—ñ–Ω–≥ –≤–∏—â–µ {threshold}%</b>\n\n"
    lines = [f"{'üü¢' if row['rate'] > 0 else 'üî¥'} <code>{row['symbol']:<8}</code>‚Äî <b>{row['rate']: >-7.4f}%</b> ‚Äî {row['exchange']}" for _, row in filtered_df.iterrows()]
    return header + "\n".join(lines)

def format_ticker_info(df: pd.DataFrame, ticker: str) -> str:
    if df.empty: return f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–∏—Ö –¥–ª—è <b>{html.escape(ticker)}</b>."
    header = f"<b>ü™ô –§–∞–Ω–¥—ñ–Ω–≥ –¥–ª—è {html.escape(ticker.upper())}</b>\n\n"
    lines = [f"{'üü¢' if row['rate'] > 0 else 'üî¥'} <b>{row['rate']: >-7.4f}%</b> ‚Äî {row['exchange']}" for _, row in df.iterrows()]
    return header + "\n".join(lines)

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ ---
async def start_or_refresh(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = getattr(update, 'callback_query', None)
    if query: await query.answer()
    
    chat_id = update.effective_chat.id
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç /start –∞–±–æ refresh –¥–ª—è —á–∞—Ç—É {chat_id}")
    
    settings = get_user_settings(chat_id)
    if not settings.get('enabled', True) and not query:
        await context.bot.send_message(chat_id, "–ë–æ—Ç –≤–∏–º–∫–Ω–µ–Ω–∏–π. –£–≤—ñ–º–∫–Ω—ñ—Ç—å –π–æ–≥–æ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö.")
        return

    message_to_edit = await context.bot.send_message(chat_id, "–ü–æ—á–∏–Ω–∞—é –ø–æ—à—É–∫... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ —Ö–≤–∏–ª–∏–Ω–∏.")
    
    try:
        df = get_all_funding_data_sequential(settings['exchanges'])
        message_text = format_funding_update(df, settings['threshold'])
        await message_to_edit.edit_text(text=message_text, parse_mode=ParseMode.HTML, reply_markup=get_main_menu_keyboard(), disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ start_or_refresh: {e}", exc_info=True)
        await message_to_edit.edit_text("üòî –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏.")

async def settings_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    settings = get_user_settings(query.effective_chat.id)
    await query.edit_message_text("‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>", parse_mode=ParseMode.HTML, reply_markup=get_settings_menu_keyboard(settings))

async def close_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.delete()
    await start_or_refresh(query, context)

async def exchange_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    settings = get_user_settings(query.effective_chat.id)
    await query.edit_message_text("üåê <b>–í–∏–±—ñ—Ä –±—ñ—Ä–∂</b>", parse_mode=ParseMode.HTML, reply_markup=get_exchange_selection_keyboard(settings['exchanges']))

async def toggle_exchange_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    exchange_name = query.data.split('_')[-1]
    settings = get_user_settings(query.effective_chat.id)
    if exchange_name in settings['exchanges']: settings['exchanges'].remove(exchange_name)
    else: settings['exchanges'].append(exchange_name)
    update_user_setting(query.effective_chat.id, 'exchanges', settings['exchanges'])
    await query.edit_message_reply_markup(reply_markup=get_exchange_selection_keyboard(settings['exchanges']))
    await query.answer(f"–ë—ñ—Ä–∂–∞ {exchange_name} –æ–Ω–æ–≤–ª–µ–Ω–∞")

async def toggle_bot_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    settings = get_user_settings(query.effective_chat.id)
    new_status = not settings.get('enabled', True)
    update_user_setting(query.effective_chat.id, 'enabled', new_status)
    await query.answer(f"–ë–æ—Ç —Ç–µ–ø–µ—Ä {'–£–í–Ü–ú–ö–ù–ï–ù–ò–ô' if new_status else '–í–ò–ú–ö–ù–ï–ù–ò–ô'}")
    await query.edit_message_reply_markup(reply_markup=get_settings_menu_keyboard(get_user_settings(query.effective_chat.id)))

async def set_threshold_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    settings = get_user_settings(query.effective_chat.id)
    text = f"–ü–æ—Ç–æ—á–Ω–∏–π –ø–æ—Ä—ñ–≥: <b>{settings['threshold']}%</b>.\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä., <code>0.5</code>)."
    await query.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=get_back_to_settings_keyboard())
    return SET_THRESHOLD_STATE

async def set_threshold_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        new_threshold = float(update.message.text.strip())
        if 0 < new_threshold < 100:
            update_user_setting(chat_id, 'threshold', new_threshold)
            await update.message.reply_text(f"‚úÖ –ù–æ–≤–∏–π –ø–æ—Ä—ñ–≥: <b>{new_threshold}%</b>", parse_mode=ParseMode.HTML)
        else: await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 100.")
    except (ValueError, TypeError): await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
    await context.bot.delete_message(chat_id, update.message.message_id - 1)
    await update.message.delete()
    settings = get_user_settings(chat_id)
    await context.bot.send_message(chat_id, "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>", parse_mode=ParseMode.HTML, reply_markup=get_settings_menu_keyboard(settings))
    return ConversationHandler.END

async def ticker_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text: return
    ticker = update.message.text.strip().upper()
    settings = get_user_settings(update.effective_chat.id)
    message = await update.message.reply_text(f"–®—É–∫–∞—é <b>{html.escape(ticker)}</b>...", parse_mode=ParseMode.HTML)
    df = get_funding_for_ticker_sequential(ticker, settings['exchanges'])
    message_text = format_ticker_info(df, ticker)
    await message.edit_text(message_text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É ---
def main() -> None:
    load_dotenv()
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN: logger.critical("!!! –ù–ï –ó–ù–ê–ô–î–ï–ù–û TELEGRAM_BOT_TOKEN !!!"); return

    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(set_threshold_callback, pattern="^settings_threshold$")],
        states={SET_THRESHOLD_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_threshold_conversation)]},
        fallbacks=[CallbackQueryHandler(settings_menu_callback, pattern="^settings_menu$")]
    )

    application.add_handler(CommandHandler("start", start_or_refresh))
    application.add_handler(CallbackQueryHandler(start_or_refresh, pattern="^refresh$"))
    application.add_handler(CallbackQueryHandler(settings_menu_callback, pattern="^settings_menu$"))
    application.add_handler(CallbackQueryHandler(close_settings_callback, pattern="^close_settings$"))
    application.add_handler(CallbackQueryHandler(exchange_menu_callback, pattern="^settings_exchanges$"))
    application.add_handler(CallbackQueryHandler(toggle_exchange_callback, pattern="^toggle_exchange_"))
    application.add_handler(CallbackQueryHandler(toggle_bot_status_callback, pattern="^toggle_bot_status$"))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ticker_message_handler))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –≤ –ø–æ–≤–Ω–æ—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ...")
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()