# run_bot.py (–í–µ—Ä—Å—ñ—è –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤)

import os
import logging
import multiprocessing as mp
import time
import uuid
import asyncio
from queue import Empty
import pandas as pd
import html

from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, ConversationHandler, filters
from telegram.constants import ParseMode

# --- –ú–æ–¥—É–ª—ñ, —è–∫—ñ —Ä–∞–Ω—ñ—à–µ –±—É–ª–∏ –≤ –æ–∫—Ä–µ–º–∏—Ö —Ñ–∞–π–ª–∞—Ö ---

# –ó config.py
DEFAULT_SETTINGS = {
    "enabled": True, "threshold": 0.3, "interval": 60,
    "exchanges": ['Binance', 'ByBit', 'OKX', 'MEXC', 'Bitget', 'KuCoin']
}
# –ó constants.py
SET_THRESHOLD_STATE = 0

# –ó user_manager.py (–∞–ª–µ —Ç–µ–ø–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ø–∞–º'—è—Ç—ñ)
_user_settings_cache = {}
def get_user_settings(chat_id: int) -> dict:
    chat_id_str = str(chat_id)
    if chat_id_str not in _user_settings_cache:
        _user_settings_cache[chat_id_str] = DEFAULT_SETTINGS.copy()
    return _user_settings_cache[chat_id_str]

def update_user_setting(chat_id: int, key: str, value):
    chat_id_str = str(chat_id)
    get_user_settings(chat_id) # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ —Å–ª–æ–≤–Ω–∏–∫ —ñ—Å–Ω—É—î
    _user_settings_cache[chat_id_str][key] = value

# –ó services/funding_service.py (–±–µ–∑ –∑–º—ñ–Ω)
# (—è –≤—Å—Ç–∞–≤–ª—é —Å—é–¥–∏ –∫–æ–¥, —â–æ–± –≤—Å–µ –±—É–ª–æ –≤ –æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ)
from src.services.funding_service import get_all_funding_data_sequential, get_funding_for_ticker_sequential
from src.services.formatters import format_funding_update, format_ticker_info
from src.keyboards import get_main_menu_keyboard, get_settings_menu_keyboard

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logging.getLogger("httpx").setLevel(logging.WARNING)

# --- –õ–æ–≥—ñ–∫–∞ –í–æ—Ä–∫–µ—Ä–∞ ---
def worker_process(task_queue: mp.Queue, result_queue: mp.Queue):
    # ... (–∫–æ–¥ –≤–æ—Ä–∫–µ—Ä–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
    worker_logger = logging.getLogger("Worker")
    while True:
        try:
            task_type, job_id, payload = task_queue.get()
            if task_type is None: break
            if task_type == 'get_all_funding':
                result_df = get_all_funding_data_sequential(payload)
            elif task_type == 'get_ticker_funding':
                ticker, exchanges = payload
                result_df = get_funding_for_ticker_sequential(ticker, exchanges)
            else: result_df = pd.DataFrame()
            result_queue.put((job_id, result_df))
        except Exception as e:
            worker_logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É –≤–æ—Ä–∫–µ—Ä—ñ: {e}")

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ ---
bot_logger = logging.getLogger("BotHandler")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    bot_logger.info("!!! –û–¢–†–ò–ú–ê–ù–û –ö–û–ú–ê–ù–î–£ /start !!!")
    if not update.effective_chat or not update.message: return
        
    chat_id = update.effective_chat.id
    bot_logger.info(f"–ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –¥–ª—è —á–∞—Ç—É {chat_id}.")
    
    # --- –ó–ú–Ü–ù–ï–ù–û: –ë–ï–ó –†–û–ë–û–¢–ò –ó –§–ê–ô–õ–ê–ú–ò ---
    settings = get_user_settings(chat_id)
    bot_logger.info(f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ –∫–µ—à—É. –ë—ñ—Ä–∂—ñ: {settings['exchanges']}")
    # ------------------------------------

    task_queue = context.bot_data['task_queue']
    result_queue = context.bot_data['result_queue']
    job_id = str(uuid.uuid4())
    
    await update.message.reply_text("–í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∑–∞–≤–¥–∞–Ω–Ω—è...")
    bot_logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è #{job_id[:6]}.")
    
    task_queue.put(('get_all_funding', job_id, settings['exchanges']))
    bot_logger.info(f"–ó–∞–≤–¥–∞–Ω–Ω—è #{job_id[:6]} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É –≤–æ—Ä–∫–µ—Ä.")
    
    processing_message = await update.message.reply_text(f"–ó–∞–≤–¥–∞–Ω–Ω—è –≤ —á–µ—Ä–∑—ñ. –û—á—ñ–∫—É—é...")
    
    # ... (—Ä–µ—à—Ç–∞ –∫–æ–¥—É start –±–µ–∑ –∑–º—ñ–Ω, –ª–æ–≥—ñ–∫–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É) ...
    result_df = None; start_time = time.time()
    while time.time() - start_time < 120:
        if not result_queue.empty():
            try:
                job_result_id, df = result_queue.get_nowait()
                if job_result_id == job_id: result_df = df; break
                else: result_queue.put((job_result_id, df))
            except Empty: pass
        await asyncio.sleep(1)
    if result_df is not None:
        message_text = format_funding_update(result_df, settings['threshold'])
        await processing_message.edit_text(text=message_text, parse_mode=ParseMode.HTML, reply_markup=get_main_menu_keyboard(), disable_web_page_preview=True)
    else:
        await processing_message.edit_text("üòî –í–æ—Ä–∫–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤ –≤—á–∞—Å–Ω–æ.")

# ... (—Ç—É—Ç –º–∞—é—Ç—å –±—É—Ç–∏ –≤—Å—ñ —ñ–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏: refresh_callback, settings_menu_callback, —ñ —Ç.–¥.)
# –í–æ–Ω–∏ –±—É–¥—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó get_user_settings —Ç–∞ update_user_setting, —è–∫—ñ –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å –∑ —Ñ–∞–π–ª–∞–º–∏.

# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É ---
def main() -> None:
    # ... (–∫–æ–¥ main –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
    load_dotenv(); TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN: logging.critical("!!! –ù–ï –ó–ù–ê–ô–î–ï–ù–û TOKEN !!!"); return
    task_queue = mp.Queue(); result_queue = mp.Queue()
    worker = mp.Process(target=worker_process, args=(task_queue, result_queue), daemon=True)
    worker.start()
    application = Application.builder().token(TOKEN).build()
    application.bot_data["task_queue"] = task_queue
    application.bot_data["result_queue"] = result_queue
    # –î–æ–¥–∞—î–º–æ –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    # ... (—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —ñ–Ω—à–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤) ...
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è (–±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤)...")
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    if os.name == 'nt': mp.set_start_method('spawn', force=True)
    main()