# run_bot.py

import os
import logging
import multiprocessing as mp
import time
import uuid
import asyncio
from queue import Empty
import pandas as pd

from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.constants import ParseMode

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –Ω–∞—à–æ–≥–æ –ø–∞–∫–µ—Ç—É src
# –ú–∏ –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Ü–µ–π —Ñ–∞–π–ª –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä–µ–Ω—ñ, –∞ –ø–æ—Ä—É—á —î –ø–∞–ø–∫–∞ src
from src.services.funding_service import get_all_funding_data_sequential
from src.services.formatters import format_funding_update
from src.keyboards import get_main_menu_keyboard
from src.user_manager import get_user_settings, _save_settings, _load_settings

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑–æ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é, —â–æ–± –±–∞—á–∏—Ç–∏ –ª–æ–≥–∏ –∑ —É—Å—ñ—Ö –º–æ–¥—É–ª—ñ–≤
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler() # –í–∏–≤–æ–¥–∏–º–æ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
# –ó–º–µ–Ω—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ–≥—ñ–≤ –≤—ñ–¥ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫, —â–æ–± –Ω–µ –∑–∞–≤–∞–∂–∞–ª–∏
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("apscheduler").setLevel(logging.WARNING)

# --- –õ–æ–≥—ñ–∫–∞ –í–æ—Ä–∫–µ—Ä–∞ ---
def worker_process(task_queue: mp.Queue, result_queue: mp.Queue):
    """–ü—Ä–æ—Ü–µ—Å, —è–∫–∏–π —Å–ª—É—Ö–∞—î –∑–∞–≤–¥–∞–Ω–Ω—è —ñ –≤–∏–∫–æ–Ω—É—î —ó—Ö."""
    worker_logger = logging.getLogger("Worker")
    worker_logger.info("–ü—Ä–æ—Ü–µ—Å-–≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.")

    while True:
        try:
            task = task_queue.get()
            
            if task is None:
                worker_logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è. –í–æ—Ä–∫–µ—Ä –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è.")
                break

            job_id, exchanges_list = task
            worker_logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è #{job_id[:6]} –¥–ª—è –±—ñ—Ä–∂: {exchanges_list}")
            
            result_df = get_all_funding_data_sequential(exchanges_list)
            
            result_queue.put((job_id, result_df))
            worker_logger.info(f"–ó–∞–≤–¥–∞–Ω–Ω—è #{job_id[:6]} –≤–∏–∫–æ–Ω–∞–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        except Exception as e:
            worker_logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —É –≤–æ—Ä–∫–µ—Ä—ñ: {e}", exc_info=True)


# --- –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start, —è–∫–∏–π –ø—Ä–∞—Ü—é—î –∑ —á–µ—Ä–≥–∞–º–∏."""
    bot_logger = logging.getLogger("BotHandler")
    bot_logger.info("!!! –û–¢–†–ò–ú–ê–ù–û –ö–û–ú–ê–ù–î–£ /start !!!")

    if not update.effective_chat:
        bot_logger.warning("–û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ —á–∞—Ç—É, —ñ–≥–Ω–æ—Ä—É—é.")
        return
        
    chat_id = update.effective_chat.id
    bot_logger.info(f"–ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –¥–ª—è —á–∞—Ç—É {chat_id}.")

    try:
        _load_settings()
        settings = get_user_settings(chat_id)
        _save_settings()
        bot_logger.info("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ/—Å—Ç–≤–æ—Ä–µ–Ω–æ.")

        task_queue = context.bot_data['task_queue']
        result_queue = context.bot_data['result_queue']
        
        job_id = str(uuid.uuid4())
        
        await update.message.reply_text("–í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —á–µ—Ä–≥—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏...")
        bot_logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è #{job_id[:6]}.")
        
        exchanges_to_scan = list(settings['exchanges'])
        task_queue.put((job_id, exchanges_to_scan))
        bot_logger.info(f"–ó–∞–≤–¥–∞–Ω–Ω—è #{job_id[:6]} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É –≤–æ—Ä–∫–µ—Ä.")
        
        processing_message = await update.message.reply_text(f"–ó–∞–≤–¥–∞–Ω–Ω—è –≤ —á–µ—Ä–∑—ñ. –û—á—ñ–∫—É—é –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        
        result_df = None
        start_time = time.time()
        while time.time() - start_time < 120:
            if not result_queue.empty():
                try:
                    job_result_id, df = result_queue.get_nowait()
                    if job_result_id == job_id:
                        result_df = df
                        bot_logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è #{job_id[:6]}")
                        break
                    else:
                        result_queue.put((job_result_id, df))
                except Empty:
                    pass
            
            await asyncio.sleep(1)
                
        if result_df is not None:
            bot_logger.info(f"–§–æ—Ä–º–∞—Ç—É—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è #{job_id[:6]}")
            message_text = format_funding_update(result_df, settings['threshold'])
            await processing_message.edit_text(
                text=message_text,
                parse_mode=ParseMode.HTML,
                reply_markup=get_main_menu_keyboard(),
                disable_web_page_preview=True
            )
            bot_logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è #{job_id[:6]} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            bot_logger.error(f"–¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è #{job_id[:6]}")
            await processing_message.edit_text("üòî –í–æ—Ä–∫–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤ –≤—á–∞—Å–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    except Exception as e:
        bot_logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É /start: {e}", exc_info=True)
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞.")


# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É ---
def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É."""
    main_logger = logging.getLogger("Main")
    load_dotenv()
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        main_logger.critical("!!! –ù–ï –ó–ù–ê–ô–î–ï–ù–û TELEGRAM_BOT_TOKEN !!! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –Ω–∞ Railway.")
        return

    task_queue = mp.Queue()
    result_queue = mp.Queue()

    worker = mp.Process(target=worker_process, args=(task_queue, result_queue), daemon=True)
    worker.start()
    main_logger.info("–ü—Ä–æ—Ü–µ—Å-–≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π.")

    application = Application.builder().token(TOKEN).build()
    application.bot_data["task_queue"] = task_queue
    application.bot_data["result_queue"] = result_queue

    application.add_handler(CommandHandler("start", start))
    
    main_logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    
    try:
        application.run_polling(drop_pending_updates=True)
    finally:
        main_logger.info("–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
        task_queue.put(None)
        worker.join(timeout=5)
        if worker.is_alive():
            worker.terminate()
        main_logger.info("–ë–æ—Ç —Ç–∞ –≤–æ—Ä–∫–µ—Ä –∑—É–ø–∏–Ω–µ–Ω—ñ.")

if __name__ == "__main__":
    # –¶–µ–π –±–ª–æ–∫ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏–π –¥–ª—è Windows —Ç–∞ macOS
    if __package__ is None and os.name != 'posix':
        mp.set_start_method('spawn', force=True)
    main()