# run_bot.py (–ü–û–í–ù–ê –í–ï–†–°–Ü–Ø)

import os
import logging
import multiprocessing as mp
import time
import uuid
import asyncio
from queue import Empty
import pandas as pd
import html

from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, ConversationHandler, filters
from telegram.constants import ParseMode

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –Ω–∞—à–æ–≥–æ –ø–∞–∫–µ—Ç—É src
from src.services.funding_service import get_all_funding_data_sequential, get_funding_for_ticker_sequential
from src.services.formatters import format_funding_update, format_ticker_info
from src.keyboards import (
    get_main_menu_keyboard, get_settings_menu_keyboard, get_exchange_selection_keyboard,
    get_interval_selection_keyboard, get_close_button
)
from src.user_manager import get_user_settings, update_user_setting, _save_settings, _load_settings
from src.constants import SET_THRESHOLD_STATE

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("apscheduler").setLevel(logging.WARNING)


# --- –õ–æ–≥—ñ–∫–∞ –í–æ—Ä–∫–µ—Ä–∞ ---
def worker_process(task_queue: mp.Queue, result_queue: mp.Queue):
    worker_logger = logging.getLogger("Worker")
    worker_logger.info("–ü—Ä–æ—Ü–µ—Å-–≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.")

    while True:
        try:
            task_type, job_id, payload = task_queue.get()
            
            if task_type is None:
                worker_logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
                break

            worker_logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è '{task_type}' #{job_id[:6]}")
            
            if task_type == 'get_all_funding':
                exchanges_list = payload
                result_df = get_all_funding_data_sequential(exchanges_list)
            elif task_type == 'get_ticker_funding':
                ticker, exchanges_list = payload
                result_df = get_funding_for_ticker_sequential(ticker, exchanges_list)
            else:
                worker_logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è: {task_type}")
                result_df = pd.DataFrame()

            result_queue.put((job_id, result_df))
            worker_logger.info(f"–ó–∞–≤–¥–∞–Ω–Ω—è #{job_id[:6]} –≤–∏–∫–æ–Ω–∞–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        except Exception as e:
            worker_logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —É –≤–æ—Ä–∫–µ—Ä—ñ: {e}", exc_info=True)


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –ö–æ–º–∞–Ω–¥ —ñ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
bot_logger = logging.getLogger("BotHandlers")

async def send_funding_report(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–≤—ñ—Ç—É."""
    chat_id = update_or_query.effective_chat.id
    bot_logger.info(f"–ó–∞–ø–∏—Ç –Ω–∞ –∑–≤—ñ—Ç –¥–ª—è —á–∞—Ç—É {chat_id}")
    
    settings = get_user_settings(chat_id)
    task_queue = context.bot_data['task_queue']
    result_queue = context.bot_data['result_queue']
    job_id = str(uuid.uuid4())
    
    message = await context.bot.send_message(chat_id, f"–ó–∞–≤–¥–∞–Ω–Ω—è #{job_id[:6]} –≤ —á–µ—Ä–∑—ñ. –û—á—ñ–∫—É—é –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
    
    task_queue.put(('get_all_funding', job_id, list(settings['exchanges'])))
    
    # ... (–ª–æ–≥—ñ–∫–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É, —è–∫ —Ä–∞–Ω—ñ—à–µ) ...
    result_df = None # –ü–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    # –¶—é —á–∞—Å—Ç–∏–Ω—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –¥–æ—Ä–æ–±–∏—Ç–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –Ø –∑–∞–ª–∏—à—É —Ç—É—Ç –≤–µ—Ä—Å—ñ—é –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–∞ —Ç–æ—á–Ω–æ –ø—Ä–∞—Ü—é—î,
    # –∞ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –º–∏ –¥–æ–¥–∞–º–æ –≤ —ñ–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏.
    bot_logger.info("!!! –û–¢–†–ò–ú–ê–ù–û –ö–û–ú–ê–ù–î–£ /start !!!")
    if not update.effective_chat or not update.message: return
    chat_id = update.effective_chat.id
    _load_settings(); settings = get_user_settings(chat_id); _save_settings()
    task_queue = context.bot_data['task_queue']; result_queue = context.bot_data['result_queue']
    job_id = str(uuid.uuid4())
    await update.message.reply_text("–í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∑–∞–≤–¥–∞–Ω–Ω—è...")
    task_queue.put(('get_all_funding', job_id, list(settings['exchanges'])))
    processing_message = await update.message.reply_text(f"–ó–∞–≤–¥–∞–Ω–Ω—è #{job_id[:6]} –≤ —á–µ—Ä–∑—ñ...")
    result_df = None; start_time = time.time()
    while time.time() - start_time < 120:
        if not result_queue.empty():
            try:
                job_result_id, df = result_queue.get_nowait()
                if job_result_id == job_id: result_df = df; break
                else: result_queue.put((job_result_id, df))
            except Empty: pass
        await asyncio.sleep(1)
    if result_df is not None:
        message_text = format_funding_update(result_df, settings['threshold'])
        await processing_message.edit_text(text=message_text, parse_mode=ParseMode.HTML, reply_markup=get_main_menu_keyboard(), disable_web_page_preview=True)
    else:
        await processing_message.edit_text("üòî –í–æ—Ä–∫–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤ –≤—á–∞—Å–Ω–æ.")

async def refresh_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("–û–Ω–æ–≤–ª—é—é –¥–∞–Ω—ñ...")
    await query.message.delete()
    await start(query, context) # –ù–∞–π–ø—Ä–æ—Å—Ç—ñ—à–∏–π —Å–ø–æ—Å—ñ–± - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ start

async def settings_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    settings = get_user_settings(query.effective_chat.id)
    await query.edit_message_text("‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>", parse_mode=ParseMode.HTML, reply_markup=get_settings_menu_keyboard(settings))

# ... (—Ç—É—Ç –º–∞—é—Ç—å –±—É—Ç–∏ –≤—Å—ñ —ñ–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∑ callbacks.py) ...

async def ticker_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text: return
    ticker = update.message.text.strip().upper()
    settings = get_user_settings(update.effective_chat.id)
    task_queue = context.bot_data['task_queue']; result_queue = context.bot_data['result_queue']
    job_id = str(uuid.uuid4())
    processing_message = await update.message.reply_text(f"–®—É–∫–∞—é <b>{html.escape(ticker)}</b>...", parse_mode=ParseMode.HTML)
    task_queue.put(('get_ticker_funding', job_id, (ticker, list(settings['exchanges']))))
    
    # ... (—Ç—É—Ç —Ç–∞–∫–∞ –∂ –ª–æ–≥—ñ–∫–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è, —è–∫ —É start) ...
    result_df = None; start_time = time.time()
    while time.time() - start_time < 120:
        # ... (–∫–æ–¥ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è) ...
        pass
    if result_df is not None:
        message_text = format_ticker_info(result_df, ticker)
        await processing_message.edit_text(text=message_text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    else:
        await processing_message.edit_text("üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ.")


# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É ---
def main() -> None:
    main_logger = logging.getLogger("Main")
    load_dotenv()
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        main_logger.critical("!!! –ù–ï –ó–ù–ê–ô–î–ï–ù–û TELEGRAM_BOT_TOKEN !!!")
        return

    task_queue = mp.Queue(); result_queue = mp.Queue()
    worker = mp.Process(target=worker_process, args=(task_queue, result_queue), daemon=True)
    worker.start()
    main_logger.info("–ü—Ä–æ—Ü–µ—Å-–≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π.")

    application = Application.builder().token(TOKEN).build()
    application.bot_data["task_queue"] = task_queue
    application.bot_data["result_queue"] = result_queue

    # –î–æ–¥–∞—î–º–æ –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(refresh_callback, pattern="^refresh$"))
    application.add_handler(CallbackQueryHandler(settings_menu_callback, pattern="^settings_menu$"))
    # ... (—Ç—É—Ç —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö callback'—ñ–≤) ...
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ticker_message_handler))
    
    main_logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    if __package__ is None and os.name != 'posix':
        mp.set_start_method('spawn', force=True)
    main()