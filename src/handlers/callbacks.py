# src/handlers/callbacks.py

import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from ..user_manager import get_user_settings, update_user_setting
from ..services import funding_service, formatters
from ..keyboards import (
    get_main_menu_keyboard,
    get_settings_menu_keyboard,
    get_exchange_selection_keyboard,
    get_interval_selection_keyboard,
    get_close_button
)
from ..constants import SET_THRESHOLD_STATE

logger = logging.getLogger(__name__)

async def refresh_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–Ω–æ–≤–ª—é—î –≥–æ–ª–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–∞–Ω–¥—ñ–Ω–≥–æ–º, –∑–∞–ø—É—Å–∫–∞—é—á–∏ –∑–∞–ø–∏—Ç —É —Ñ–æ–Ω—ñ."""
    query = update.callback_query
    await query.answer("–û–Ω–æ–≤–ª—é—é –¥–∞–Ω—ñ...")
    chat_id = update.effective_chat.id
    settings = get_user_settings(chat_id)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –°–ò–ù–•–†–û–ù–ù–£ —Ñ—É–Ω–∫—Ü—ñ—é –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        df = await context.application.create_task(
            funding_service.get_all_funding_data_sync,
            (settings['exchanges'],)
        )
        message_text = formatters.format_funding_update(df, settings['threshold'])
        
        await query.edit_message_text(
            text=message_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu_keyboard(),
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {chat_id}: {e}", exc_info=True)
        try:
            await query.answer("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è. –ú–æ–∂–ª–∏–≤–æ, –¥–∞–Ω—ñ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è.", show_alert=True)
        except Exception:
            pass

async def settings_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."""
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    settings = get_user_settings(chat_id)
    
    await query.edit_message_text(
        text="‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –∑–º—ñ–Ω–∏:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_settings_menu_keyboard(settings)
    )

async def close_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–∫—Ä–∏–≤–∞—î –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ç–∞ –æ–Ω–æ–≤–ª—é—î –≥–æ–ª–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    query = update.callback_query
    await query.answer("–ó–±–µ—Ä—ñ–≥–∞—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª—é—é...")
    # –ü—Ä–æ—Å—Ç–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —è–∫–∞ –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –ª–æ–≥—ñ–∫—É
    await refresh_callback(update, context)

async def exchange_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É –±—ñ—Ä–∂."""
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    settings = get_user_settings(chat_id)
    
    await query.edit_message_text(
        text="üåê <b>–í–∏–±—ñ—Ä –±—ñ—Ä–∂</b>\n\n–û–±–µ—Ä—ñ—Ç—å –±—ñ—Ä–∂—ñ –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_exchange_selection_keyboard(settings['exchanges'])
    )

async def toggle_exchange_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–º–∏–∫–∞—î —Å—Ç–∞–Ω –æ–±—Ä–∞–Ω–æ—ó –±—ñ—Ä–∂—ñ."""
    query = update.callback_query
    exchange_name = query.data.split('_')[-1]
    chat_id = update.effective_chat.id
    
    settings = get_user_settings(chat_id)
    current_exchanges = settings.get('exchanges', [])
    
    if exchange_name in current_exchanges:
        current_exchanges.remove(exchange_name)
    else:
        current_exchanges.append(exchange_name)
    
    update_user_setting(chat_id, 'exchanges', current_exchanges)
    
    await query.edit_message_reply_markup(
        reply_markup=get_exchange_selection_keyboard(current_exchanges)
    )
    await query.answer(f"–ë—ñ—Ä–∂–∞ {exchange_name} {'—É–≤—ñ–º–∫–Ω–µ–Ω–∞' if exchange_name in current_exchanges else '–≤–∏–º–∫–Ω–µ–Ω–∞'}")

async def set_threshold_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∏–Ω–∞—î –¥—ñ–∞–ª–æ–≥ –¥–ª—è –∑–º—ñ–Ω–∏ –ø–æ—Ä–æ–≥—É —Ñ–∞–Ω–¥—ñ–Ω–≥—É."""
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    settings = get_user_settings(chat_id)

    text = (f"–ü–æ—Ç–æ—á–Ω–∏–π –ø–æ—Ä—ñ–≥: <b>{settings['threshold']}%</b>.\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä., <code>0.5</code>), —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –π–æ–≥–æ.")
    
    await query.edit_message_text(
        text, 
        parse_mode=ParseMode.HTML, 
        reply_markup=get_close_button()
    )
    return SET_THRESHOLD_STATE

async def interval_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        text="‚è≥ <b>–ß–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è</b>\n\n–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.",
        parse_mode=ParseMode.HTML,
        reply_markup=get_interval_selection_keyboard()
    )

async def set_interval_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –Ω–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª."""
    query = update.callback_query
    interval_minutes = int(query.data.split('_')[-1])
    chat_id = update.effective_chat.id
    
    update_user_setting(chat_id, 'interval', interval_minutes)
    settings = get_user_settings(chat_id)
    
    await query.answer(f"–Ü–Ω—Ç–µ—Ä–≤–∞–ª –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {interval_minutes} —Ö–≤.")
    await query.edit_message_text(
        text="‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –∑–º—ñ–Ω–∏:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_settings_menu_keyboard(settings)
    )

async def toggle_bot_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–º–∏–∫–∞—î —Å—Ç–∞–Ω –±–æ—Ç–∞ (ON/OFF)."""
    query = update.callback_query
    chat_id = update.effective_chat.id
    settings = get_user_settings(chat_id)
    
    new_status = not settings.get('enabled', True)
    update_user_setting(chat_id, 'enabled', new_status)
    settings['enabled'] = new_status
    
    await query.answer(f"–ë–æ—Ç —Ç–µ–ø–µ—Ä {'–£–í–Ü–ú–ö–ù–ï–ù–ò–ô' if new_status else '–í–ò–ú–ö–ù–ï–ù–ò–ô'}")
    await query.edit_message_reply_markup(reply_markup=get_settings_menu_keyboard(settings))

async def delete_message_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å—Ç–æ –≤–∏–¥–∞–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤ —è–∫–æ–º—É –±—É–ª–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞."""
    query = update.callback_query
    await query.answer()
    await query.message.delete()